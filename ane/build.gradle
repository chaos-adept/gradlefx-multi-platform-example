ext.FLEXSDK_HOME = System.getenv('FLEX_HOME')


ext.aneApiProjectName = ':ane:android-helloworld-api'
ext.aneApiProject = project(aneApiProjectName)

ext.apiLibPath = "${aneApiProject.buildDir}/android-helloworld-api.swc"

task('prepareApi') << {
    zipTree(apiLibPath.toString()).each { file -> if (file.name == "library.swf") {
        copy {
            from file.path
            into "${buildDir}/Android-ARM/"
        }
    } }
}

task('prepareDefaultApi') << {
	def defaultApiLibPath = "${project(':ane:default-helloworld-api').buildDir}/default-helloworld-api.swc"
    zipTree(defaultApiLibPath).each { file -> if (file.name == "library.swf") {
        copy {
            from file.path
            into "${buildDir}/default/"
        }
    } }
}

task('prepareNativeLib') {
    ext.android_lib_project = project(":ane:android-helloworld")
    ext.android_lib_path = "${android_lib_project.buildDir}/libs/android-helloworld-1.0.jar"
	
    inputs.file file(android_lib_path)
    outputs.file file("${buildDir}/Android-ARM/")
}

tasks.prepareNativeLib << {
    copy {
        from android_lib_path
        into "${buildDir}/Android-ARM/"
    }
}


task('packageAne') << {

    def ANT_RESULT_PROPERTY = 'adtResult'
    def ANT_OUTPUT_PROPERTY = 'adtOutput'

    adtArguments = []

    addArg = {String arg ->
        adtArguments.add(arg)
    }

    addArgs = {...args ->
        adtArguments.addAll(args)
    }

    handlePackageIfFailed = { antResultProperty, antOutputProperty ->
        if (ant.properties[antResultProperty] != '0') {
            throw new Exception("Packaging failed: ${ant.properties[antOutputProperty]}\n")
        }
    }

    showAntOutput = { antOutput->
        println antOutput
    }

	
	buildDir.mkdirs();
    addArgs "-package", "-target", "ane", "${buildDir}/helloworld.ane", "ane-descriptor.xml", "-swc", apiLibPath
    addArgs "-platform", "Android-ARM", "-C", "${buildDir}/Android-ARM", "."
    addArgs "-platform", "default", "-C", "${buildDir}/default", "."
    ant.java(jar: FLEXSDK_HOME + '/lib/adt.jar',
            fork: true,
            resultproperty: ANT_RESULT_PROPERTY,
            outputproperty: ANT_OUTPUT_PROPERTY) {
        adtArguments.each { argument ->
            println("adt args: ${argument}")
            arg(value: argument.toString())
        }
    }

    handlePackageIfFailed ANT_RESULT_PROPERTY, ANT_OUTPUT_PROPERTY

    showAntOutput ant.properties[ANT_OUTPUT_PROPERTY]

}

tasks.packageAne.dependsOn tasks.prepareApi
tasks.packageAne.dependsOn tasks.prepareDefaultApi
tasks.packageAne.dependsOn tasks.prepareNativeLib

task('package') {
	dependsOn packageAne
}

tasks.package << {
}

dependencies {
    //runtime project(':ane:flash-licensing-ane-wrapper')
}