subprojects {
ext.FLEXSDK_HOME = System.getenv('FLEX_HOME')

	ext.apiLibPath = "common-api/build/common-api.swc"
	ext.defaultApiLibPath = "default-lib/build/default-lib.swc"
	ext.android_lib_path = "android-lib/build/libs"	

	task('prepareApi') << {
		file("${buildDir}/Android-ARM/").mkdirs()
		zipTree(apiLibPath.toString()).each { file -> if (file.name == "library.swf") {
			copy {
				from file.path
				into "${buildDir}/Android-ARM/"
			}
		} }
	}

	task('prepareDefaultApi') << {
	file("${buildDir}/default/").mkdirs()
		zipTree(defaultApiLibPath).each { file -> if (file.name == "library.swf") {
			copy {
				from file.path
				into "${buildDir}/default/"
			}
		} }
	}	
	
	
	task('prepareNativeLib') {
		file("${buildDir}/Android-ARM/").mkdirs()
		inputs.dir file(android_lib_path)
		outputs.dir file("${buildDir}/Android-ARM/")
	}

	tasks.prepareNativeLib << {
		copy {
			from android_lib_path
			into "${buildDir}/Android-ARM/"
		}
	}
	
	task('packageAne') << {

		def ANT_RESULT_PROPERTY = 'adtResult'
		def ANT_OUTPUT_PROPERTY = 'adtOutput'

		adtArguments = []

		addArg = {String arg ->
			adtArguments.add(arg)
		}

		addArgs = {...args ->
			adtArguments.addAll(args)
		}

		handlePackageIfFailed = { antResultProperty, antOutputProperty ->
			if (ant.properties[antResultProperty] != '0') {
				throw new Exception("Packaging failed: ${ant.properties[antOutputProperty]}\n")
			}
		}

		showAntOutput = { antOutput->
			println antOutput
		}

		
		buildDir.mkdirs();
		addArgs "-package", "-target", "ane", "${buildDir}/${project.name}.ane", "ane-descriptor.xml", "-swc", apiLibPath
		addArgs "-platform", "Android-ARM", "-C", "${buildDir}/Android-ARM", "."
		addArgs "-platform", "default", "-C", "${buildDir}/default", "."
		ant.java(jar: FLEXSDK_HOME + '/lib/adt.jar',
				fork: true,
				resultproperty: ANT_RESULT_PROPERTY,
				outputproperty: ANT_OUTPUT_PROPERTY) {
			adtArguments.each { argument ->
				println("adt args: ${argument}")
				arg(value: argument.toString())
			}
		}

		handlePackageIfFailed ANT_RESULT_PROPERTY, ANT_OUTPUT_PROPERTY

		showAntOutput ant.properties[ANT_OUTPUT_PROPERTY]

	}	
	
	tasks.packageAne.dependsOn tasks.prepareApi
	tasks.packageAne.dependsOn tasks.prepareDefaultApi
	tasks.packageAne.dependsOn tasks.prepareNativeLib	
	
	
	gradle.projectsEvaluated {
		tasks.packageAne.dependsOn(subprojects.build)
	} 		
	
	/*
	task('package') {
		dependsOn tasks.packageAne		
	}

	tasks.package << {
	}	*/
	
	/*
	tasks.packageAne.dependsOn tasks.prepareApi
	tasks.packageAne.dependsOn tasks.prepareDefaultApi
	tasks.packageAne.dependsOn tasks.prepareNativeLib

	task('package') {
		dependsOn tasks.packageAne		
	}

	tasks.package << {
	}	*/
	
/*
	ext.FLEXSDK_HOME = System.getenv('FLEX_HOME')

	ext.apiLibPath = "common-api/build/common-api.swc"
	ext.defaultApiLibPath = "default-lib/build/default-api.swc"
	ext.android_lib_path = "android-lib/build/libs"	
	
	task('prepareApi') << {
		file("${buildDir}/Android-ARM/").mkdirs()
		zipTree(apiLibPath.toString()).each { file -> if (file.name == "library.swf") {
			copy {
				from file.path
				into "${buildDir}/Android-ARM/"
			}
		} }
	}

	task('prepareDefaultApi') << {
	file("${buildDir}/default/").mkdirs()
		zipTree(defaultApiLibPath).each { file -> if (file.name == "library.swf") {
			copy {
				from file.path
				into "${buildDir}/default/"
			}
		} }
	}

	task('prepareNativeLib') {
		file("${buildDir}/Android-ARM/").mkdirs()
		inputs.dir file(android_lib_path)
		outputs.dir file("${buildDir}/Android-ARM/")
	}

	tasks.prepareNativeLib << {
		copy {
			from android_lib_path
			into "${buildDir}/Android-ARM/"
		}
	}


	task('packageAne') << {

		def ANT_RESULT_PROPERTY = 'adtResult'
		def ANT_OUTPUT_PROPERTY = 'adtOutput'

		adtArguments = []

		addArg = {String arg ->
			adtArguments.add(arg)
		}

		addArgs = {...args ->
			adtArguments.addAll(args)
		}

		handlePackageIfFailed = { antResultProperty, antOutputProperty ->
			if (ant.properties[antResultProperty] != '0') {
				throw new Exception("Packaging failed: ${ant.properties[antOutputProperty]}\n")
			}
		}

		showAntOutput = { antOutput->
			println antOutput
		}

		
		buildDir.mkdirs();
		addArgs "-package", "-target", "ane", "${buildDir}/${project.name}.ane", "ane-descriptor.xml", "-swc", apiLibPath
		addArgs "-platform", "Android-ARM", "-C", "${buildDir}/Android-ARM", "."
		addArgs "-platform", "default", "-C", "${buildDir}/default", "."
		ant.java(jar: FLEXSDK_HOME + '/lib/adt.jar',
				fork: true,
				resultproperty: ANT_RESULT_PROPERTY,
				outputproperty: ANT_OUTPUT_PROPERTY) {
			adtArguments.each { argument ->
				println("adt args: ${argument}")
				arg(value: argument.toString())
			}
		}

		handlePackageIfFailed ANT_RESULT_PROPERTY, ANT_OUTPUT_PROPERTY

		showAntOutput ant.properties[ANT_OUTPUT_PROPERTY]

	}

	tasks.packageAne.dependsOn tasks.prepareApi
	tasks.packageAne.dependsOn tasks.prepareDefaultApi
	tasks.packageAne.dependsOn tasks.prepareNativeLib

	task('package') {
		dependsOn tasks.packageAne		
	}

	tasks.package << {
	}

	
	
	gradle.projectsEvaluated {
		tasks.packageAne.dependsOn(subprojects.build)
	} 	
	
	dependencies {
		//runtime project(':ane:flash-licensing-ane-wrapper')
	}
*/
}
